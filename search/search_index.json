{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"snekcord A work-in-progress Discord API wrapper written in Python. Join the Discord Server","title":"Home"},{"location":"#snekcord","text":"A work-in-progress Discord API wrapper written in Python.","title":"snekcord"},{"location":"#join-the-discord-server","text":"","title":"Join the Discord Server"},{"location":"getting-started/","text":"Getting Started Installation Installation can be done with pip pip install -U snekcord Examples import snekcord TOKEN = '' client = snekcord . Client ( TOKEN ) @client . on () async def message_create ( evt ): message = evt . message channel = evt . channel if message . content == \".ping\" : await channel . messages . create ( \"Pong!\" ) client . loop . create_task ( client . login ()) client . run_forever ()","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"Installation can be done with pip pip install -U snekcord","title":"Installation"},{"location":"getting-started/#examples","text":"import snekcord TOKEN = '' client = snekcord . Client ( TOKEN ) @client . on () async def message_create ( evt ): message = evt . message channel = evt . channel if message . content == \".ping\" : await channel . messages . create ( \"Pong!\" ) client . loop . create_task ( client . login ()) client . run_forever ()","title":"Examples"},{"location":"api-reference/objects/base/","text":"BaseObject The base class for all cachable Discord entities Attributes: Name Type Description state BaseState The state that the object belongs to id Optional[Snowflake|str] The object's unique identifier provided by Discord's API, the will be the object's code for GuildTemplate and Invite objects cached bool Whether or not the object is stored in its state's cache deleted bool Whether or not the object is deleted deleted_at Optional[datetime] The time at which the object was marked as deleted Warning The deleted and deleted_at attributes will only be accurate for objects maintained by a Discord WebSocket connection __hash__ ( self ) special Equivalent to hash(self.id) Exceptions: Type Description PartialObjectError Raised when the object's id is None Source code in snekcord\\objects\\baseobject.py def __hash__ ( self ): \"\"\"Equivalent to `hash(self.id)` Raises: PartialObjectError: Raised when the object's id is None \"\"\" if self . id is None : raise PartialObjectError ( f ' { self . __class__ . __name__ } object is missing a valid id' ) return hash ( self . id ) __init__ ( self , * , state ) special Parameters: Name Type Description Default state BaseState The state that the object belongs to required Source code in snekcord\\objects\\baseobject.py def __init__ ( self , * , state ): \"\"\" Arguments: state BaseState: The state that the object belongs to \"\"\" self . state = state self . id = None self . cached = False self . deleted = False self . deleted_at = None cache ( self ) Stores the object in the state's cache and attempts to remove it from the state's recycle bin Source code in snekcord\\objects\\baseobject.py def cache ( self ): \"\"\"Stores the object in the state's cache and attempts to remove it from the state's recycle bin \"\"\" self . cached = True self . state [ self . id ] = self self . state . unrecycle ( self . id , None ) fetch ( self ) async Equivalent to self.state.fetch(self.id) Source code in snekcord\\objects\\baseobject.py async def fetch ( self ): \"\"\"Equivalent to `self.state.fetch(self.id)`\"\"\" return await self . state . fetch ( self . id ) uncache ( self , recycle = True ) Removes the object from the state's cache Parameters: Name Type Description Default recycle bool Whether or not to put the object in the state's recycle bin True Source code in snekcord\\objects\\baseobject.py def uncache ( self , recycle = True ): \"\"\"Removes the object from the state's cache Arguments: recycle bool: Whether or not to put the object in the state's recycle bin \"\"\" self . cached = False self . state . pop ( self . id , None ) if recycle : self . state . recycle ( self . id , self )","title":"Base"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject","text":"The base class for all cachable Discord entities Attributes: Name Type Description state BaseState The state that the object belongs to id Optional[Snowflake|str] The object's unique identifier provided by Discord's API, the will be the object's code for GuildTemplate and Invite objects cached bool Whether or not the object is stored in its state's cache deleted bool Whether or not the object is deleted deleted_at Optional[datetime] The time at which the object was marked as deleted Warning The deleted and deleted_at attributes will only be accurate for objects maintained by a Discord WebSocket connection","title":"BaseObject"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject.__hash__","text":"Equivalent to hash(self.id) Exceptions: Type Description PartialObjectError Raised when the object's id is None Source code in snekcord\\objects\\baseobject.py def __hash__ ( self ): \"\"\"Equivalent to `hash(self.id)` Raises: PartialObjectError: Raised when the object's id is None \"\"\" if self . id is None : raise PartialObjectError ( f ' { self . __class__ . __name__ } object is missing a valid id' ) return hash ( self . id )","title":"__hash__()"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject.__init__","text":"Parameters: Name Type Description Default state BaseState The state that the object belongs to required Source code in snekcord\\objects\\baseobject.py def __init__ ( self , * , state ): \"\"\" Arguments: state BaseState: The state that the object belongs to \"\"\" self . state = state self . id = None self . cached = False self . deleted = False self . deleted_at = None","title":"__init__()"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject.cache","text":"Stores the object in the state's cache and attempts to remove it from the state's recycle bin Source code in snekcord\\objects\\baseobject.py def cache ( self ): \"\"\"Stores the object in the state's cache and attempts to remove it from the state's recycle bin \"\"\" self . cached = True self . state [ self . id ] = self self . state . unrecycle ( self . id , None )","title":"cache()"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject.fetch","text":"Equivalent to self.state.fetch(self.id) Source code in snekcord\\objects\\baseobject.py async def fetch ( self ): \"\"\"Equivalent to `self.state.fetch(self.id)`\"\"\" return await self . state . fetch ( self . id )","title":"fetch()"},{"location":"api-reference/objects/base/#snekcord.objects.baseobject.BaseObject.uncache","text":"Removes the object from the state's cache Parameters: Name Type Description Default recycle bool Whether or not to put the object in the state's recycle bin True Source code in snekcord\\objects\\baseobject.py def uncache ( self , recycle = True ): \"\"\"Removes the object from the state's cache Arguments: recycle bool: Whether or not to put the object in the state's recycle bin \"\"\" self . cached = False self . state . pop ( self . id , None ) if recycle : self . state . recycle ( self . id , self )","title":"uncache()"},{"location":"api-reference/objects/channels/","text":"CategoryChannel Represents the GUILD_CATEGORY channel type children ( self ) Yields all of the GuildChannels that belong to this category Source code in snekcord\\objects\\channelobject.py def children ( self ): \"\"\"Yields all of the `GuildChannels` that belong to this category\"\"\" for channel in self . state : if channel . parent_id == self . id : yield channel ChannelType An enumaration of Discord's channel types Name Description GUILD_TEXT A text channel in a Guild DM A direct message channel GUILD_VOICE A voice channel in a Guild GROUP_DM A DM channel with multiple recipients GUILD_CATEGORY A category channel in a Guild GUILD_NEWS A news channel in a Guild GUILD_STORE A store channel in a Guild GUILD_NEWS_THREAD A news thread channel in a Guild GUILD_PUBLIC_THREAD A public thread channel in a Guild GUILD_PRIVATE_THREAD A private thread channel in a Guild GUILD_STAGE_VOICE A stage channel in a Guild DMChannel close ( self ) async Invokes an API request to close the channel Source code in snekcord\\objects\\channelobject.py async def close ( self ): \"\"\"Invokes an API request to close the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) GuildChannel The base class for all channels that belong to a Guild Attributes: Name Type Description name str The channel's name guild_id Snowflake The id of the guild that the channel is in position int The channel's position nsfw bool True if the channel is allowed to have explicit content otherwise False parent_id Snowflake The id of the channel's parent/category type ChannelType The channel's type guild property readonly The Guild that the channel belongs to Warning This propery relies on the guild cache so it could return None mention property readonly The channel in mention format, equivalent to f'<#{self.id}>' parent property readonly The channel's parent/category Warning This propery relies on the channel cache so it could return None delete ( self ) async Invokes an API request to delete the channel Source code in snekcord\\objects\\channelobject.py async def delete ( self ): \"\"\"Invokes an API request to delete the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) modify ( self , ** kwargs ) async Invokes an API request to modify the channel Arguments: Name Type Channel Types name str All type ChannelType GUILD_TEXT , GUILD_NEWS position int All topic str GUILD_TEXT , GUILD_NEWS nsfw bool GUILD_TEXT , GUILD_NEWS , GUILD_STORE slowmode int GUILD_TEXT bitrate int GUILD_VOICE user_limit int GUILD_VOICE parent SnowflakeLike GUILD_TEXT , GUILD_NEWS , GUILD_STORE , GUILD_VOICE rtc_region str GUILD_VOICE Note Discord only supports conversion between GUILD_TEXT and GUILD_NEWS Returns: Type Description GuildChannel The modified channel Source code in snekcord\\objects\\channelobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the channel **Arguments:** | Name | Type | Channel Types | | ------------ | --------------- | -------------------------------------------------------- | | `name` | `str` | `All` | | `type` | `ChannelType` | `GUILD_TEXT`, `GUILD_NEWS` | | `position` | `int` | `All` | | `topic` | `str` | `GUILD_TEXT`, `GUILD_NEWS` | | `nsfw` | `bool` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE` | | `slowmode` | `int` | `GUILD_TEXT` | | `bitrate` | `int` | `GUILD_VOICE` | | `user_limit` | `int` | `GUILD_VOICE` | | `parent` | `SnowflakeLike` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE`, `GUILD_VOICE` | | `rtc_region` | `str` | `GUILD_VOICE` | note: Discord only supports conversion between `GUILD_TEXT` and `GUILD_NEWS` Returns: GuildChannel: The modified channel \"\"\" # noqa: E501 keys = _guild_channel_modification_keys ( self . type ) if self . type in ( ChannelType . GUILD_TEXT , ChannelType . GUILD_NEWS , ChannelType . GUILD_STORE ): try : kwargs [ 'parent_id' ] = Snowflake . try_snowflake ( kwargs . pop ( 'parent' )) except KeyError : pass if self . type is ChannelType . GUILD_TEXT : try : kwargs [ 'rate_limit_per_user' ] = kwargs . pop ( 'slowmode' ) except KeyError : pass _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ), json = kwargs ) return self . state . upsert ( data ) TextChannel Represens the GUILD_TEXT channel type Attributes: Name Type Description messages MessageState The channel's message state topic str The channel's topic slowmode int The amount of time you have to wait between sending sucessive messages in the channel last_message_id Snowflake The id of the last message sent in the channel last_message property readonly The last message sent in the channel Warning This property relies on the message cache so it could return None pins ( self ) async Invokes an API request to get the pinned messages in the channel Returns: Type Description list[Message] The pinned messages in the channel Source code in snekcord\\objects\\channelobject.py async def pins ( self ): \"\"\"Invokes an API request to get the pinned messages in the channel Returns: list[Message]: The pinned messages in the channel \"\"\" data = await rest . get_pinned_messages . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) return self . messages . upsert_many ( data ) typing ( self ) async Invokes an API request to trigger the typing indicator in the channel Source code in snekcord\\objects\\channelobject.py async def typing ( self ): \"\"\"Invokes an API request to trigger the typing indicator in the channel \"\"\" await rest . trigger_typing_indicator . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) VoiceChannel Represents the GUILD_VOICE channel type Attributes: Name Type Description bitrate int The channel's bitrate user_limit int The maximum amount of people who can be in this channel at once","title":"Channels"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.CategoryChannel","text":"Represents the GUILD_CATEGORY channel type","title":"CategoryChannel"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.CategoryChannel.children","text":"Yields all of the GuildChannels that belong to this category Source code in snekcord\\objects\\channelobject.py def children ( self ): \"\"\"Yields all of the `GuildChannels` that belong to this category\"\"\" for channel in self . state : if channel . parent_id == self . id : yield channel","title":"children()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.ChannelType","text":"An enumaration of Discord's channel types Name Description GUILD_TEXT A text channel in a Guild DM A direct message channel GUILD_VOICE A voice channel in a Guild GROUP_DM A DM channel with multiple recipients GUILD_CATEGORY A category channel in a Guild GUILD_NEWS A news channel in a Guild GUILD_STORE A store channel in a Guild GUILD_NEWS_THREAD A news thread channel in a Guild GUILD_PUBLIC_THREAD A public thread channel in a Guild GUILD_PRIVATE_THREAD A private thread channel in a Guild GUILD_STAGE_VOICE A stage channel in a Guild","title":"ChannelType"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.DMChannel","text":"","title":"DMChannel"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.DMChannel.close","text":"Invokes an API request to close the channel Source code in snekcord\\objects\\channelobject.py async def close ( self ): \"\"\"Invokes an API request to close the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"close()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel","text":"The base class for all channels that belong to a Guild Attributes: Name Type Description name str The channel's name guild_id Snowflake The id of the guild that the channel is in position int The channel's position nsfw bool True if the channel is allowed to have explicit content otherwise False parent_id Snowflake The id of the channel's parent/category type ChannelType The channel's type","title":"GuildChannel"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel.guild","text":"The Guild that the channel belongs to Warning This propery relies on the guild cache so it could return None","title":"guild"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel.mention","text":"The channel in mention format, equivalent to f'<#{self.id}>'","title":"mention"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel.parent","text":"The channel's parent/category Warning This propery relies on the channel cache so it could return None","title":"parent"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel.delete","text":"Invokes an API request to delete the channel Source code in snekcord\\objects\\channelobject.py async def delete ( self ): \"\"\"Invokes an API request to delete the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"delete()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.GuildChannel.modify","text":"Invokes an API request to modify the channel Arguments: Name Type Channel Types name str All type ChannelType GUILD_TEXT , GUILD_NEWS position int All topic str GUILD_TEXT , GUILD_NEWS nsfw bool GUILD_TEXT , GUILD_NEWS , GUILD_STORE slowmode int GUILD_TEXT bitrate int GUILD_VOICE user_limit int GUILD_VOICE parent SnowflakeLike GUILD_TEXT , GUILD_NEWS , GUILD_STORE , GUILD_VOICE rtc_region str GUILD_VOICE Note Discord only supports conversion between GUILD_TEXT and GUILD_NEWS Returns: Type Description GuildChannel The modified channel Source code in snekcord\\objects\\channelobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the channel **Arguments:** | Name | Type | Channel Types | | ------------ | --------------- | -------------------------------------------------------- | | `name` | `str` | `All` | | `type` | `ChannelType` | `GUILD_TEXT`, `GUILD_NEWS` | | `position` | `int` | `All` | | `topic` | `str` | `GUILD_TEXT`, `GUILD_NEWS` | | `nsfw` | `bool` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE` | | `slowmode` | `int` | `GUILD_TEXT` | | `bitrate` | `int` | `GUILD_VOICE` | | `user_limit` | `int` | `GUILD_VOICE` | | `parent` | `SnowflakeLike` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE`, `GUILD_VOICE` | | `rtc_region` | `str` | `GUILD_VOICE` | note: Discord only supports conversion between `GUILD_TEXT` and `GUILD_NEWS` Returns: GuildChannel: The modified channel \"\"\" # noqa: E501 keys = _guild_channel_modification_keys ( self . type ) if self . type in ( ChannelType . GUILD_TEXT , ChannelType . GUILD_NEWS , ChannelType . GUILD_STORE ): try : kwargs [ 'parent_id' ] = Snowflake . try_snowflake ( kwargs . pop ( 'parent' )) except KeyError : pass if self . type is ChannelType . GUILD_TEXT : try : kwargs [ 'rate_limit_per_user' ] = kwargs . pop ( 'slowmode' ) except KeyError : pass _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ), json = kwargs ) return self . state . upsert ( data )","title":"modify()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.TextChannel","text":"Represens the GUILD_TEXT channel type Attributes: Name Type Description messages MessageState The channel's message state topic str The channel's topic slowmode int The amount of time you have to wait between sending sucessive messages in the channel last_message_id Snowflake The id of the last message sent in the channel","title":"TextChannel"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.TextChannel.last_message","text":"The last message sent in the channel Warning This property relies on the message cache so it could return None","title":"last_message"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.TextChannel.pins","text":"Invokes an API request to get the pinned messages in the channel Returns: Type Description list[Message] The pinned messages in the channel Source code in snekcord\\objects\\channelobject.py async def pins ( self ): \"\"\"Invokes an API request to get the pinned messages in the channel Returns: list[Message]: The pinned messages in the channel \"\"\" data = await rest . get_pinned_messages . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) return self . messages . upsert_many ( data )","title":"pins()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.TextChannel.typing","text":"Invokes an API request to trigger the typing indicator in the channel Source code in snekcord\\objects\\channelobject.py async def typing ( self ): \"\"\"Invokes an API request to trigger the typing indicator in the channel \"\"\" await rest . trigger_typing_indicator . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"typing()"},{"location":"api-reference/objects/channels/#snekcord.objects.channelobject.VoiceChannel","text":"Represents the GUILD_VOICE channel type Attributes: Name Type Description bitrate int The channel's bitrate user_limit int The maximum amount of people who can be in this channel at once","title":"VoiceChannel"},{"location":"api-reference/objects/embed/","text":"EmbedAuthor An embed author Attributes: Name Type Description name str The author's name icon_url str The author's icon url proxy_icon_url str The author's proxy icon url EmbedField An embed field Attributes: Name Type Description name str The field's name value str The field's value inline bool Whather or not the field is inline EmbedFooter An embed footer Attributes: Name Type Description text str The footer's text icon_url str The footer's icon url proxy_icon_url str The footer's proxy icon url EmbedImage An embed image Attributes: Name Type Description url str The image's url proxy_url str The image's proxy url height int The image's height width int The image's width EmbedProvider An embed provider Attributes: Name Type Description name str The provider's name url str The provider's url EmbedThumbnail An embed thumbnail Attributes: Name Type Description url str The thumbnail's url proxy_url str The thumbnail's proxy url height int The thumbnail's height width int The thumbnail's width EmbedVideo An embed video Attributes: Name Type Description url str The video's url proxy_url str The video's proxy url height int The video's height width int The video's width Embed Represents embedded rich content in a Message Attributes: Name Type Description title str The embed's title type EmbedType The embed's type description str The embed's description url str The embed's url timestamp datetime The embed's timestamp color int The embed's color footer EmbedFooter The embed's footer image EmbedImage The embed's image thumbnail EmbedThumbnail The embed's thumbnail video EmbedVideo The embed's video provider EmbedProvider The embed's provider author EmbedAuthor The embed's author fields list[EmbedField] The embed's fields to_builder ( self ) Equivalent to EmbedBuilder.from_embed(self) Source code in snekcord\\objects\\embedobject.py def to_builder ( self ): \"\"\"Equivalent to `EmbedBuilder.from_embed(self)`\"\"\" return EmbedBuilder . from_embed ( self ) EmbedBuilder A class that helps with building Embed s Attributes: Name Type Description embed Embed The underlying embed object Note All methods in this class return the builder __init__ ( self , ** kwargs ) special Accepts title , type , description , url , timestamp and color keyword arguments, see the corresponding set_* methods for more information Source code in snekcord\\objects\\embedobject.py def __init__ ( self , ** kwargs ): \"\"\" Accepts `title`, `type`, `description`, `url`, `timestamp` and `color` keyword arguments, see the corresponding `set_*` methods for more information \"\"\" self . embed = Embed . unmarshal ({ 'fields' : []}) self . set_title ( kwargs . get ( 'title' )) self . set_type ( kwargs . get ( 'type' )) self . set_description ( kwargs . get ( 'description' )) self . set_url ( kwargs . get ( 'url' )) self . set_timestamp ( kwargs . get ( 'timestamp' )) self . set_color ( kwargs . get ( 'color' )) add_field ( self , name , value , inline = None ) Adds a field to the embed Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def add_field ( self , name , value , inline = None ): \"\"\"Adds a field to the embed Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . fields . append ( self . _field ( name , value , inline )) return self clear_author ( self ) Clears the embed's author Source code in snekcord\\objects\\embedobject.py def clear_author ( self ): \"\"\"Clears the embed's author\"\"\" self . embed . author = None return self clear_color ( self ) Clears the embed's color Source code in snekcord\\objects\\embedobject.py def clear_color ( self ): \"\"\"Clears the embed's color\"\"\" self . embed . color = None return self clear_description ( self ) Clears the embed's description Source code in snekcord\\objects\\embedobject.py def clear_description ( self ): \"\"\"Clears the embed's description\"\"\" self . embed . description = None return self clear_fields ( self ) Clears the fields of the embed Source code in snekcord\\objects\\embedobject.py def clear_fields ( self ): \"\"\"Clears the fields of the embed\"\"\" self . embed . fields . clear () return self clear_footer ( self ) Clears the embed's footer Source code in snekcord\\objects\\embedobject.py def clear_footer ( self ): \"\"\"Clears the embed's footer\"\"\" self . embed . footer = None return self clear_image ( self ) Clears the embed's image Source code in snekcord\\objects\\embedobject.py def clear_image ( self ): \"\"\"Clears the embed's image\"\"\" self . embed . image = None clear_provider ( self ) Clears the embed's provider Source code in snekcord\\objects\\embedobject.py def clear_provider ( self ): \"\"\"Clears the embed's provider\"\"\" self . embed . provider = None return self clear_thumbnail ( self ) Clears the embed's thumbnail Source code in snekcord\\objects\\embedobject.py def clear_thumbnail ( self ): \"\"\"Clears the embed's thumbnail\"\"\" self . embed . thumbnail = None return self clear_timestamp ( self ) Clears the embed's timestamp Source code in snekcord\\objects\\embedobject.py def clear_timestamp ( self ): \"\"\"Clears the embed's timestamp\"\"\" self . embed . timestamp = None return self clear_title ( self ) Clears the embed's title Source code in snekcord\\objects\\embedobject.py def clear_title ( self ): \"\"\"Clears the embed's title\"\"\" self . embed . title = None return self clear_type ( self ) Clears embed's type Source code in snekcord\\objects\\embedobject.py def clear_type ( self ): \"\"\"Clears embed's type\"\"\" self . embed . type = None return self clear_url ( self ) Clears the embed's url Source code in snekcord\\objects\\embedobject.py def clear_url ( self ): \"\"\"Clears the embed's url\"\"\" self . embed . url = None return self clear_video ( self ) Clears the embed's video Source code in snekcord\\objects\\embedobject.py def clear_video ( self ): \"\"\"Clears the embed's video\"\"\" self . embed . video = None return self extend_fields ( self , * fields ) Adds multiple fields of (name, value, inline=None) to the embed Examples: builder = snekcord . EmbedBuilder () builder . add_fields ( ( 'Hello' , 'World' ), ( 'Goodbye' , 'World' , False ), ) Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def extend_fields ( self , * fields ): \"\"\"Adds multiple fields of `(name, value, inline=None)` to the embed Examples: ```py builder = snekcord.EmbedBuilder() builder.add_fields( ('Hello', 'World'), ('Goodbye', 'World', False), ) ``` Raises: TypeError: Raised when an invalid argument type is provided \"\"\" for field in fields : self . add_field ( * field ) return self from_embed ( embed ) classmethod Creates a builder from an Embed Parameters: Name Type Description Default embed Embed The embed to create a builder from required Returns: Type Description EmbedBuilder The builder Source code in snekcord\\objects\\embedobject.py @classmethod def from_embed ( cls , embed ): \"\"\"Creates a builder from an `Embed` Arguments: embed Embed: The embed to create a builder from Returns: EmbedBuilder: The builder \"\"\" self = cls . __new__ ( cls ) self . embed = copy . copy ( embed ) return self insert_field ( self , index , name , value , inline = None ) Inserts a field into the embed at index Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def insert_field ( self , index , name , value , inline = None ): \"\"\"Inserts a field into the embed at `index` Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . fields . insert ( index , self . _field ( name , value , inline )) return self send_to ( self , channel , ** kwargs ) async Sends the embed to channel with **kwargs , equivalent to await channel.messages.create(embed=self.embed) Source code in snekcord\\objects\\embedobject.py async def send_to ( self , channel , ** kwargs ): \"\"\"Sends the embed to `channel` with `**kwargs`, equivalent to `await channel.messages.create(embed=self.embed)` \"\"\" kwargs [ 'embed' ] = self . embed return await channel . messages . create ( ** kwargs ) set_author ( self , name , icon_url = None , proxy_icon_url = None ) Sets the embed's author Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_author ( self , name , icon_url = None , proxy_icon_url = None ): \"\"\"Sets the embed's author Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if not isinstance ( name , str ): raise TypeError ( f 'name should be a str, got { name . __class__ . __name__ !r} ' ) if icon_url is not None and not isinstance ( icon_url , str ): raise TypeError ( f 'icon_url should be a str or None, got ' f ' { icon_url . __class__ . __name__ !r} ' ) if proxy_icon_url is not None and not isinstance ( proxy_icon_url , str ): raise TypeError ( f 'proxy_icon_url should be a str or None, got ' f ' { proxy_icon_url . __class__ . __name__ !r} ' ) self . embed . author = EmbedAuthor . unmarshal ({ 'name' : name , 'icon_url' : icon_url , 'proxy_icon_url' : proxy_icon_url }) return self set_color ( self , color ) Sets the embed's color Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_color ( self , color ): \"\"\"Sets the embed's color Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if color is not None and not isinstance ( color , int ): raise TypeError ( f 'color should be an int, got { color . __class__ . __name__ !r} ' ) self . embed . color = color return self set_description ( self , description ) Sets the embed's description Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_description ( self , description ): \"\"\"Sets the embed's description Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if description is not None and not isinstance ( description , str ): raise TypeError ( f 'description should be a str or None, got ' f ' { description . __class__ . __name__ !r} ' ) self . embed . description = description return self set_footer ( self , text , icon_url = None , proxy_icon_url = None ) Sets the embed's footer Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_footer ( self , text , icon_url = None , proxy_icon_url = None ): \"\"\"Sets the embed's footer Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if not isinstance ( text , str ): raise TypeError ( f 'text should be a str, got { text . __class__ . __name__ !r} ' ) if icon_url is not None and not isinstance ( icon_url , str ): raise TypeError ( f 'icon_url should be a str or None, got ' f ' { icon_url . __class__ . __name__ !r} ' ) if proxy_icon_url is not None and not isinstance ( proxy_icon_url , str ): raise TypeError ( f 'proxy_icon_url should be a str or None, got ' f ' { proxy_icon_url . __class__ . __name__ !r} ' ) self . embed . footer = EmbedFooter . unmarshal ({ 'text' : text , 'icon_url' : icon_url , 'proxy_icon_url' : proxy_icon_url }) return self set_image ( self , url = None , proxy_url = None , height = None , width = None ) Sets the embed's image Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_image ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's image Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . image = EmbedImage . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self set_provider ( self , name = None , url = None ) Sets the embed's provider Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_provider ( self , name = None , url = None ): \"\"\"Sets the embed's provider Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if name is not None and not isinstance ( name , str ): raise TypeError ( f 'name should be a str or None, got { name . __class__ . __name__ } ' ) if url is not None and not isinstance ( url , str ): raise TypeError ( f 'url should be a str or None, got { url . __class__ . __name__ } ' ) self . embed . provider = EmbedProvider . unmarshal ({ 'name' : name , 'url' : url }) return self set_thumbnail ( self , url = None , proxy_url = None , height = None , width = None ) Sets the embed's thumbnail Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_thumbnail ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's thumbnail Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . thumbnail = EmbedThumbnail . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self set_timestamp ( self , timestamp ) Sets the embed's timestamp Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_timestamp ( self , timestamp ): \"\"\"Sets the embed's timestamp Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if isinstance ( timestamp , str ): timestamp = datetime . fromisoformat ( timestamp ) elif isinstance ( timestamp , ( int , float )): timestamp = datetime . fromtimestamp ( timestamp ) if timestamp is not None and not isinstance ( timestamp , datetime ): raise TypeError ( f 'timestamp should be a str, int, float, datetime or None, ' , f 'got { timestamp . __class__ . __name__ !r} ' ) self . embed . timestamp = timestamp return self set_title ( self , title ) Sets the embed's title Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_title ( self , title ): \"\"\"Sets the embed's title Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if title is not None and not isinstance ( title , str ): raise TypeError ( f 'title should be a str or None, got' f ' { title . __class__ . __name__ !r} ' ) self . embed . title = title return self set_type ( self , type ) Sets the embed's type Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_type ( self , type ): \"\"\"Sets the embed's type Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . type = EmbedType ( type ) if type is not None else None return self set_url ( self , url ) Sets the embed's url Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_url ( self , url ): \"\"\"Sets the embed's url Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if url is not None and not isinstance ( url , str ): raise TypeError ( f 'url should be a str or None, got ' f ' { url . __class__ . __name__ !r} ' ) self . embed . url = url return self set_video ( self , url = None , proxy_url = None , height = None , width = None ) Sets the embed's video Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_video ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's video Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . video = EmbedImage . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self EmbedType An enumeration of Discord's embed types Name Description RICH Generic embed rendered from attributes IMAGE Image embed VIDEO Video embed GIFV Animated gif image embed rendered as a video embed ARTICLE Article embed LINK Link embed Warning This is not used by Discord and should be considered deprecated","title":"Embed"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedAuthor","text":"An embed author Attributes: Name Type Description name str The author's name icon_url str The author's icon url proxy_icon_url str The author's proxy icon url","title":"EmbedAuthor"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedField","text":"An embed field Attributes: Name Type Description name str The field's name value str The field's value inline bool Whather or not the field is inline","title":"EmbedField"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedFooter","text":"An embed footer Attributes: Name Type Description text str The footer's text icon_url str The footer's icon url proxy_icon_url str The footer's proxy icon url","title":"EmbedFooter"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedImage","text":"An embed image Attributes: Name Type Description url str The image's url proxy_url str The image's proxy url height int The image's height width int The image's width","title":"EmbedImage"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedProvider","text":"An embed provider Attributes: Name Type Description name str The provider's name url str The provider's url","title":"EmbedProvider"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedThumbnail","text":"An embed thumbnail Attributes: Name Type Description url str The thumbnail's url proxy_url str The thumbnail's proxy url height int The thumbnail's height width int The thumbnail's width","title":"EmbedThumbnail"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedVideo","text":"An embed video Attributes: Name Type Description url str The video's url proxy_url str The video's proxy url height int The video's height width int The video's width","title":"EmbedVideo"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.Embed","text":"Represents embedded rich content in a Message Attributes: Name Type Description title str The embed's title type EmbedType The embed's type description str The embed's description url str The embed's url timestamp datetime The embed's timestamp color int The embed's color footer EmbedFooter The embed's footer image EmbedImage The embed's image thumbnail EmbedThumbnail The embed's thumbnail video EmbedVideo The embed's video provider EmbedProvider The embed's provider author EmbedAuthor The embed's author fields list[EmbedField] The embed's fields","title":"Embed"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.Embed.to_builder","text":"Equivalent to EmbedBuilder.from_embed(self) Source code in snekcord\\objects\\embedobject.py def to_builder ( self ): \"\"\"Equivalent to `EmbedBuilder.from_embed(self)`\"\"\" return EmbedBuilder . from_embed ( self )","title":"to_builder()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder","text":"A class that helps with building Embed s Attributes: Name Type Description embed Embed The underlying embed object Note All methods in this class return the builder","title":"EmbedBuilder"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.__init__","text":"Accepts title , type , description , url , timestamp and color keyword arguments, see the corresponding set_* methods for more information Source code in snekcord\\objects\\embedobject.py def __init__ ( self , ** kwargs ): \"\"\" Accepts `title`, `type`, `description`, `url`, `timestamp` and `color` keyword arguments, see the corresponding `set_*` methods for more information \"\"\" self . embed = Embed . unmarshal ({ 'fields' : []}) self . set_title ( kwargs . get ( 'title' )) self . set_type ( kwargs . get ( 'type' )) self . set_description ( kwargs . get ( 'description' )) self . set_url ( kwargs . get ( 'url' )) self . set_timestamp ( kwargs . get ( 'timestamp' )) self . set_color ( kwargs . get ( 'color' ))","title":"__init__()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.add_field","text":"Adds a field to the embed Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def add_field ( self , name , value , inline = None ): \"\"\"Adds a field to the embed Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . fields . append ( self . _field ( name , value , inline )) return self","title":"add_field()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_author","text":"Clears the embed's author Source code in snekcord\\objects\\embedobject.py def clear_author ( self ): \"\"\"Clears the embed's author\"\"\" self . embed . author = None return self","title":"clear_author()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_color","text":"Clears the embed's color Source code in snekcord\\objects\\embedobject.py def clear_color ( self ): \"\"\"Clears the embed's color\"\"\" self . embed . color = None return self","title":"clear_color()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_description","text":"Clears the embed's description Source code in snekcord\\objects\\embedobject.py def clear_description ( self ): \"\"\"Clears the embed's description\"\"\" self . embed . description = None return self","title":"clear_description()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_fields","text":"Clears the fields of the embed Source code in snekcord\\objects\\embedobject.py def clear_fields ( self ): \"\"\"Clears the fields of the embed\"\"\" self . embed . fields . clear () return self","title":"clear_fields()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_footer","text":"Clears the embed's footer Source code in snekcord\\objects\\embedobject.py def clear_footer ( self ): \"\"\"Clears the embed's footer\"\"\" self . embed . footer = None return self","title":"clear_footer()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_image","text":"Clears the embed's image Source code in snekcord\\objects\\embedobject.py def clear_image ( self ): \"\"\"Clears the embed's image\"\"\" self . embed . image = None","title":"clear_image()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_provider","text":"Clears the embed's provider Source code in snekcord\\objects\\embedobject.py def clear_provider ( self ): \"\"\"Clears the embed's provider\"\"\" self . embed . provider = None return self","title":"clear_provider()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_thumbnail","text":"Clears the embed's thumbnail Source code in snekcord\\objects\\embedobject.py def clear_thumbnail ( self ): \"\"\"Clears the embed's thumbnail\"\"\" self . embed . thumbnail = None return self","title":"clear_thumbnail()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_timestamp","text":"Clears the embed's timestamp Source code in snekcord\\objects\\embedobject.py def clear_timestamp ( self ): \"\"\"Clears the embed's timestamp\"\"\" self . embed . timestamp = None return self","title":"clear_timestamp()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_title","text":"Clears the embed's title Source code in snekcord\\objects\\embedobject.py def clear_title ( self ): \"\"\"Clears the embed's title\"\"\" self . embed . title = None return self","title":"clear_title()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_type","text":"Clears embed's type Source code in snekcord\\objects\\embedobject.py def clear_type ( self ): \"\"\"Clears embed's type\"\"\" self . embed . type = None return self","title":"clear_type()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_url","text":"Clears the embed's url Source code in snekcord\\objects\\embedobject.py def clear_url ( self ): \"\"\"Clears the embed's url\"\"\" self . embed . url = None return self","title":"clear_url()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.clear_video","text":"Clears the embed's video Source code in snekcord\\objects\\embedobject.py def clear_video ( self ): \"\"\"Clears the embed's video\"\"\" self . embed . video = None return self","title":"clear_video()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.extend_fields","text":"Adds multiple fields of (name, value, inline=None) to the embed Examples: builder = snekcord . EmbedBuilder () builder . add_fields ( ( 'Hello' , 'World' ), ( 'Goodbye' , 'World' , False ), ) Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def extend_fields ( self , * fields ): \"\"\"Adds multiple fields of `(name, value, inline=None)` to the embed Examples: ```py builder = snekcord.EmbedBuilder() builder.add_fields( ('Hello', 'World'), ('Goodbye', 'World', False), ) ``` Raises: TypeError: Raised when an invalid argument type is provided \"\"\" for field in fields : self . add_field ( * field ) return self","title":"extend_fields()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.from_embed","text":"Creates a builder from an Embed Parameters: Name Type Description Default embed Embed The embed to create a builder from required Returns: Type Description EmbedBuilder The builder Source code in snekcord\\objects\\embedobject.py @classmethod def from_embed ( cls , embed ): \"\"\"Creates a builder from an `Embed` Arguments: embed Embed: The embed to create a builder from Returns: EmbedBuilder: The builder \"\"\" self = cls . __new__ ( cls ) self . embed = copy . copy ( embed ) return self","title":"from_embed()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.insert_field","text":"Inserts a field into the embed at index Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def insert_field ( self , index , name , value , inline = None ): \"\"\"Inserts a field into the embed at `index` Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . fields . insert ( index , self . _field ( name , value , inline )) return self","title":"insert_field()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.send_to","text":"Sends the embed to channel with **kwargs , equivalent to await channel.messages.create(embed=self.embed) Source code in snekcord\\objects\\embedobject.py async def send_to ( self , channel , ** kwargs ): \"\"\"Sends the embed to `channel` with `**kwargs`, equivalent to `await channel.messages.create(embed=self.embed)` \"\"\" kwargs [ 'embed' ] = self . embed return await channel . messages . create ( ** kwargs )","title":"send_to()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_author","text":"Sets the embed's author Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_author ( self , name , icon_url = None , proxy_icon_url = None ): \"\"\"Sets the embed's author Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if not isinstance ( name , str ): raise TypeError ( f 'name should be a str, got { name . __class__ . __name__ !r} ' ) if icon_url is not None and not isinstance ( icon_url , str ): raise TypeError ( f 'icon_url should be a str or None, got ' f ' { icon_url . __class__ . __name__ !r} ' ) if proxy_icon_url is not None and not isinstance ( proxy_icon_url , str ): raise TypeError ( f 'proxy_icon_url should be a str or None, got ' f ' { proxy_icon_url . __class__ . __name__ !r} ' ) self . embed . author = EmbedAuthor . unmarshal ({ 'name' : name , 'icon_url' : icon_url , 'proxy_icon_url' : proxy_icon_url }) return self","title":"set_author()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_color","text":"Sets the embed's color Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_color ( self , color ): \"\"\"Sets the embed's color Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if color is not None and not isinstance ( color , int ): raise TypeError ( f 'color should be an int, got { color . __class__ . __name__ !r} ' ) self . embed . color = color return self","title":"set_color()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_description","text":"Sets the embed's description Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_description ( self , description ): \"\"\"Sets the embed's description Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if description is not None and not isinstance ( description , str ): raise TypeError ( f 'description should be a str or None, got ' f ' { description . __class__ . __name__ !r} ' ) self . embed . description = description return self","title":"set_description()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_footer","text":"Sets the embed's footer Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_footer ( self , text , icon_url = None , proxy_icon_url = None ): \"\"\"Sets the embed's footer Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if not isinstance ( text , str ): raise TypeError ( f 'text should be a str, got { text . __class__ . __name__ !r} ' ) if icon_url is not None and not isinstance ( icon_url , str ): raise TypeError ( f 'icon_url should be a str or None, got ' f ' { icon_url . __class__ . __name__ !r} ' ) if proxy_icon_url is not None and not isinstance ( proxy_icon_url , str ): raise TypeError ( f 'proxy_icon_url should be a str or None, got ' f ' { proxy_icon_url . __class__ . __name__ !r} ' ) self . embed . footer = EmbedFooter . unmarshal ({ 'text' : text , 'icon_url' : icon_url , 'proxy_icon_url' : proxy_icon_url }) return self","title":"set_footer()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_image","text":"Sets the embed's image Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_image ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's image Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . image = EmbedImage . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self","title":"set_image()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_provider","text":"Sets the embed's provider Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_provider ( self , name = None , url = None ): \"\"\"Sets the embed's provider Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if name is not None and not isinstance ( name , str ): raise TypeError ( f 'name should be a str or None, got { name . __class__ . __name__ } ' ) if url is not None and not isinstance ( url , str ): raise TypeError ( f 'url should be a str or None, got { url . __class__ . __name__ } ' ) self . embed . provider = EmbedProvider . unmarshal ({ 'name' : name , 'url' : url }) return self","title":"set_provider()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_thumbnail","text":"Sets the embed's thumbnail Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_thumbnail ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's thumbnail Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . thumbnail = EmbedThumbnail . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self","title":"set_thumbnail()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_timestamp","text":"Sets the embed's timestamp Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_timestamp ( self , timestamp ): \"\"\"Sets the embed's timestamp Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if isinstance ( timestamp , str ): timestamp = datetime . fromisoformat ( timestamp ) elif isinstance ( timestamp , ( int , float )): timestamp = datetime . fromtimestamp ( timestamp ) if timestamp is not None and not isinstance ( timestamp , datetime ): raise TypeError ( f 'timestamp should be a str, int, float, datetime or None, ' , f 'got { timestamp . __class__ . __name__ !r} ' ) self . embed . timestamp = timestamp return self","title":"set_timestamp()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_title","text":"Sets the embed's title Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_title ( self , title ): \"\"\"Sets the embed's title Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if title is not None and not isinstance ( title , str ): raise TypeError ( f 'title should be a str or None, got' f ' { title . __class__ . __name__ !r} ' ) self . embed . title = title return self","title":"set_title()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_type","text":"Sets the embed's type Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_type ( self , type ): \"\"\"Sets the embed's type Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . type = EmbedType ( type ) if type is not None else None return self","title":"set_type()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_url","text":"Sets the embed's url Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_url ( self , url ): \"\"\"Sets the embed's url Raises: TypeError: Raised when an invalid argument type is provided \"\"\" if url is not None and not isinstance ( url , str ): raise TypeError ( f 'url should be a str or None, got ' f ' { url . __class__ . __name__ !r} ' ) self . embed . url = url return self","title":"set_url()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedBuilder.set_video","text":"Sets the embed's video Exceptions: Type Description TypeError Raised when an invalid argument type is provided Source code in snekcord\\objects\\embedobject.py def set_video ( self , url = None , proxy_url = None , height = None , width = None ): \"\"\"Sets the embed's video Raises: TypeError: Raised when an invalid argument type is provided \"\"\" self . embed . video = EmbedImage . unmarshal ( self . _attachment ( url , proxy_url , height , width )) return self","title":"set_video()"},{"location":"api-reference/objects/embed/#snekcord.objects.embedobject.EmbedType","text":"An enumeration of Discord's embed types Name Description RICH Generic embed rendered from attributes IMAGE Image embed VIDEO Video embed GIFV Animated gif image embed rendered as a video embed ARTICLE Article embed LINK Link embed Warning This is not used by Discord and should be considered deprecated","title":"EmbedType"},{"location":"api-reference/objects/guild/","text":"Guild Represents a Guild from Discord Attributes: Name Type Description widget GuildWidget The guild's widget interface vanity_url GuildVanityURL The guild's vanity url interface welcome_screen GuildWelcomeScreen The guild's welcome screen interface channels GuildChannelState The guild's channel state emojis GuildEmojiState The guild's emoji state roles RoleState The guild's role state members GuildMemberState The guild's member state WelcomeScreen Represents a Guild 's welcome screen Attributes: Name Type Description description str The welcome screen's description guild Guild The guild associated with the welcome screen welcome_channels list[WelcomeChannel] The welcome screen's channels fetch ( self ) async Invokes an API request to get the welcome screen Returns: Type Description WelcomeScreen The updated welcome screen Source code in snekcord\\objects\\guildobject.py async def fetch ( self ): \"\"\"Invokes an API request to get the welcome screen Returns: WelcomeScreen: The updated welcome screen \"\"\" data = await rest . get_guild_welcome_screen . request ( session = self . guild . manager . rest , fmt = dict ( guild_id = self . guild . id )) self . update ( data ) return self modify ( self , ** kwargs ) async Invokes an API request to modify the welcome screen Parameters: Name Type Description enabled bool Whether or not the welcome screen is enabled welcome_channels dict The new welcome channels {channel: options} description str The welcome screen's new description Welcome Channel Options: Name Description description The welcome channel's description emoji The welcome channel's emoji Returns: Type Description WelcomeScreen The modified welcome screen Examples: await guild . welcome_screen . modify ( description = 'Welcome to this fantastic guild' , enabled = True , welcome_channels = { 8235356323523452 : { 'description' : 'Get roles here' , 'emoji' : some_emoji }, 7583857293758372 : { 'description' : 'Use bot commands here' , emoji : another_emoji } } ) Source code in snekcord\\objects\\guildobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the welcome screen **Parameters:** | Name | Type | Description | | ---------------- | ---- | --------------------------------------------- | | enabled | bool | Whether or not the welcome screen is enabled | | welcome_channels | dict | The new welcome channels `{channel: options}` | | description | str | The welcome screen's new description | **Welcome Channel Options:** | Name | Description | | ----------- | --------------------------------- | | description | The welcome channel's description | | emoji | The welcome channel's emoji | Returns: WelcomeScreen: The modified welcome screen Examples: ```py await guild.welcome_screen.modify( description='Welcome to this fantastic guild', enabled=True, welcome_channels={ 8235356323523452: { 'description': 'Get roles here', 'emoji': some_emoji }, 7583857293758372: { 'description': 'Use bot commands here', emoji: another_emoji } } ) ``` \"\"\" # noqa: E501 welcome_channel_keys = WelcomeScreenChannelTemplate . fields try : welcome_channels = [] for key , value in kwargs [ 'welcome_channels' ] . items (): value [ 'channel_id' ] = Snowflake . try_snowflake ( key ) try : emoji = value [ 'emoji' ] value [ 'emoji_id' ] = emoji . id value [ 'emoji_name' ] = emoji . name except KeyError : pass _validate_keys ( f 'welcome_channels[ { key } ]' , value , (), welcome_channel_keys ) welcome_channels . append ( value ) except KeyError : pass keys = rest . modify_guild_welcome_screen . json _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_guild_welcome_screen . request ( session = self . guild . manager . rest , fmt = dict ( guild_id = self . guild . id ), json = kwargs ) self . update ( data ) return self WelcomeScreenChannel Represents a channel in a WelcomeScreen Attributes: Name Type Description channel_id Snowflake The id of the channel that this welcome channel refers to description str The welcome channel's description emoji_id Snowflake The id of the welcome channel's emoji emoji_name str The name of the welcome channel's emoji welcome_screen WelcomeScreen The welcome screen associated with the channel channel property readonly The actual channel that this welcome channel refers to Warning This property relies on the channel cache so it could return None emoji property readonly The welcome channel's emoji Warning This property relies on the emoji cache to it could return None","title":"Guild"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.Guild","text":"Represents a Guild from Discord Attributes: Name Type Description widget GuildWidget The guild's widget interface vanity_url GuildVanityURL The guild's vanity url interface welcome_screen GuildWelcomeScreen The guild's welcome screen interface channels GuildChannelState The guild's channel state emojis GuildEmojiState The guild's emoji state roles RoleState The guild's role state members GuildMemberState The guild's member state","title":"Guild"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreen","text":"Represents a Guild 's welcome screen Attributes: Name Type Description description str The welcome screen's description guild Guild The guild associated with the welcome screen welcome_channels list[WelcomeChannel] The welcome screen's channels","title":"WelcomeScreen"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreen.fetch","text":"Invokes an API request to get the welcome screen Returns: Type Description WelcomeScreen The updated welcome screen Source code in snekcord\\objects\\guildobject.py async def fetch ( self ): \"\"\"Invokes an API request to get the welcome screen Returns: WelcomeScreen: The updated welcome screen \"\"\" data = await rest . get_guild_welcome_screen . request ( session = self . guild . manager . rest , fmt = dict ( guild_id = self . guild . id )) self . update ( data ) return self","title":"fetch()"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreen.modify","text":"Invokes an API request to modify the welcome screen Parameters: Name Type Description enabled bool Whether or not the welcome screen is enabled welcome_channels dict The new welcome channels {channel: options} description str The welcome screen's new description Welcome Channel Options: Name Description description The welcome channel's description emoji The welcome channel's emoji Returns: Type Description WelcomeScreen The modified welcome screen Examples: await guild . welcome_screen . modify ( description = 'Welcome to this fantastic guild' , enabled = True , welcome_channels = { 8235356323523452 : { 'description' : 'Get roles here' , 'emoji' : some_emoji }, 7583857293758372 : { 'description' : 'Use bot commands here' , emoji : another_emoji } } ) Source code in snekcord\\objects\\guildobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the welcome screen **Parameters:** | Name | Type | Description | | ---------------- | ---- | --------------------------------------------- | | enabled | bool | Whether or not the welcome screen is enabled | | welcome_channels | dict | The new welcome channels `{channel: options}` | | description | str | The welcome screen's new description | **Welcome Channel Options:** | Name | Description | | ----------- | --------------------------------- | | description | The welcome channel's description | | emoji | The welcome channel's emoji | Returns: WelcomeScreen: The modified welcome screen Examples: ```py await guild.welcome_screen.modify( description='Welcome to this fantastic guild', enabled=True, welcome_channels={ 8235356323523452: { 'description': 'Get roles here', 'emoji': some_emoji }, 7583857293758372: { 'description': 'Use bot commands here', emoji: another_emoji } } ) ``` \"\"\" # noqa: E501 welcome_channel_keys = WelcomeScreenChannelTemplate . fields try : welcome_channels = [] for key , value in kwargs [ 'welcome_channels' ] . items (): value [ 'channel_id' ] = Snowflake . try_snowflake ( key ) try : emoji = value [ 'emoji' ] value [ 'emoji_id' ] = emoji . id value [ 'emoji_name' ] = emoji . name except KeyError : pass _validate_keys ( f 'welcome_channels[ { key } ]' , value , (), welcome_channel_keys ) welcome_channels . append ( value ) except KeyError : pass keys = rest . modify_guild_welcome_screen . json _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_guild_welcome_screen . request ( session = self . guild . manager . rest , fmt = dict ( guild_id = self . guild . id ), json = kwargs ) self . update ( data ) return self","title":"modify()"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreenChannel","text":"Represents a channel in a WelcomeScreen Attributes: Name Type Description channel_id Snowflake The id of the channel that this welcome channel refers to description str The welcome channel's description emoji_id Snowflake The id of the welcome channel's emoji emoji_name str The name of the welcome channel's emoji welcome_screen WelcomeScreen The welcome screen associated with the channel","title":"WelcomeScreenChannel"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreenChannel.channel","text":"The actual channel that this welcome channel refers to Warning This property relies on the channel cache so it could return None","title":"channel"},{"location":"api-reference/objects/guild/#snekcord.objects.guildobject.WelcomeScreenChannel.emoji","text":"The welcome channel's emoji Warning This property relies on the emoji cache to it could return None","title":"emoji"}]}