{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"snekcord A work-in-progress Discord API wrapper written in Python. Join the Discord Server","title":"Home"},{"location":"#snekcord","text":"A work-in-progress Discord API wrapper written in Python.","title":"snekcord"},{"location":"#join-the-discord-server","text":"","title":"Join the Discord Server"},{"location":"getting_started/","text":"Getting Started Installation Installation can be done with pip pip install -U snekcord Examples import snekcord TOKEN = '' client = snekcord . Client ( TOKEN ) @client . on () async def message_create ( evt ): message = evt . message channel = evt . channel if message . content == \".ping\" : await channel . messages . create ( \"Pong!\" ) client . loop . create_task ( client . login ()) client . run_forever ()","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installation","text":"Installation can be done with pip pip install -U snekcord","title":"Installation"},{"location":"getting_started/#examples","text":"import snekcord TOKEN = '' client = snekcord . Client ( TOKEN ) @client . on () async def message_create ( evt ): message = evt . message channel = evt . channel if message . content == \".ping\" : await channel . messages . create ( \"Pong!\" ) client . loop . create_task ( client . login ()) client . run_forever ()","title":"Examples"},{"location":"objects/","text":"BaseObject This is the base class for all cachable Discord entities Attributes: Name Type Description state BaseState The state that this object belongs to id Optional[Snowflake|str] The object's unique identifier provided by Discord's API, this will be the object's code for GuildTemplate and Invite objects cached bool Whether or not this object is stored in its state's cache. deleted bool Whether or not this object is deleted deleted_at Optional[datetime] The time at which this object was marked as deleted Warning The deleted and deleted_at attributes will only be accurate for objects maintained by a Discord WebSocket connection __hash__ ( self ) special Equivalent to hash(self.id) Exceptions: Type Description PartialObjectError Raised when the object's id is None Source code in snekcord\\objects\\baseobject.py def __hash__ ( self ): \"\"\"Equivalent to `hash(self.id)` Raises: PartialObjectError: Raised when the object's id is None \"\"\" if self . id is None : raise PartialObjectError ( f ' { self . __class__ . __name__ } object is missing a valid id' ) return hash ( self . id ) __init__ ( self , * , state ) special Parameters: Name Type Description Default state BaseState The state that this object belongs to required Source code in snekcord\\objects\\baseobject.py def __init__ ( self , * , state ): \"\"\" Arguments: state BaseState: The state that this object belongs to \"\"\" self . state = state self . id = None self . cached = False self . deleted = False self . deleted_at = None cache ( self ) Stores the object in the state's cache and attempts to remove it from the state's recycle bin Source code in snekcord\\objects\\baseobject.py def cache ( self ): \"\"\"Stores the object in the state's cache and attempts to remove it from the state's recycle bin \"\"\" self . cached = True self . state [ self . id ] = self self . state . unrecycle ( self . id , None ) fetch ( self ) async Equivalent to self.state.fetch(self.id) Source code in snekcord\\objects\\baseobject.py async def fetch ( self ): \"\"\"Equivalent to `self.state.fetch(self.id)`\"\"\" return await self . state . fetch ( self . id ) uncache ( self , recycle = True ) Removes the object from the state's cache Parameters: Name Type Description Default recycle bool Wether or not to put the object in the state's recycle bin True Source code in snekcord\\objects\\baseobject.py def uncache ( self , recycle = True ): \"\"\"Removes the object from the state's cache Arguments: recycle bool: Wether or not to put the object in the state's recycle bin \"\"\" self . cached = False self . state . pop ( self . id , None ) if recycle : self . state . recycle ( self . id , self ) ChannelType An enumaration of Discord's channel types Name Description GUILD_TEXT A text channel in a Guild DM A direct message channel GUILD_VOICE A voice channel in a Guild GROUP_DM A DM channel with multiple recipients GUILD_CATEGORY A category channel in a Guild GUILD_NEWS A news channel in a Guild GUILD_STORE A store channel in a Guild GUILD_NEWS_THREAD A news thread channel in a Guild GUILD_PUBLIC_THREAD A public thread channel in a Guild GUILD_PRIVATE_THREAD A private thread channel in a Guild GUILD_STAGE_VOICE A stage channel in a Guild DMChannel close ( self ) async Invokes an API request to close the channel Source code in snekcord\\objects\\channelobject.py async def close ( self ): \"\"\"Invokes an API request to close the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) GuildChannel The base class for all channels that belong to a Guild Attributes: Name Type Description name str The name of the channel guild_id Snowflake The id of the guild that the channel is in position int The position of the channel nsfw bool True if the channel is allowed to have explicit content otherwise False parent_id Snowflake The id of the channel's parent/category type ChannelType The type of the channel guild property readonly The Guild that the channel belongs to Warning This propery relies on the guild cache so it could return None mention property readonly The channel in mention format, equivalent to f'<#{self.id}>' parent property readonly The channel's parent/category Warning This propery relies on the channel cache so it could return None delete ( self ) async Invokes an API request to delete the channel Source code in snekcord\\objects\\channelobject.py async def delete ( self ): \"\"\"Invokes an API request to delete the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) modify ( self , ** kwargs ) async Invokes an API request to modify the channel Arguments: Name Type Channel Types name str All type ChannelType GUILD_TEXT , GUILD_NEWS position int All topic str GUILD_TEXT , GUILD_NEWS nsfw bool GUILD_TEXT , GUILD_NEWS , GUILD_STORE slowmode int GUILD_TEXT bitrate int GUILD_VOICE user_limit int GUILD_VOICE parent SnowflakeLike GUILD_TEXT , GUILD_NEWS , GUILD_STORE , GUILD_VOICE rtc_region str GUILD_VOICE Note Discord only supports conversion between GUILD_TEXT and GUILD_NEWS Returns: Type Description GuildChannel The modified channel Source code in snekcord\\objects\\channelobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the channel **Arguments:** | Name | Type | Channel Types | | ------------ | --------------- | -------------------------------------------------------- | | `name` | `str` | `All` | | `type` | `ChannelType` | `GUILD_TEXT`, `GUILD_NEWS` | | `position` | `int` | `All` | | `topic` | `str` | `GUILD_TEXT`, `GUILD_NEWS` | | `nsfw` | `bool` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE` | | `slowmode` | `int` | `GUILD_TEXT` | | `bitrate` | `int` | `GUILD_VOICE` | | `user_limit` | `int` | `GUILD_VOICE` | | `parent` | `SnowflakeLike` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE`, `GUILD_VOICE` | | `rtc_region` | `str` | `GUILD_VOICE` | note: Discord only supports conversion between `GUILD_TEXT` and `GUILD_NEWS` Returns: GuildChannel: The modified channel \"\"\" # noqa: E501 keys = _guild_channel_modification_keys ( self . type ) if self . type in ( ChannelType . GUILD_TEXT , ChannelType . GUILD_NEWS , ChannelType . GUILD_STORE ): try : kwargs [ 'parent_id' ] = Snowflake . try_snowflake ( kwargs . pop ( 'parent' )) except KeyError : pass if self . type is ChannelType . GUILD_TEXT : try : kwargs [ 'rate_limit_per_user' ] = kwargs . pop ( 'slowmode' ) except KeyError : pass _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ), json = kwargs ) return self . state . upsert ( data ) TextChannel A class for the GUILD_TEXT channel type Attributes: Name Type Description messages MessageState The message state of the channel topic str The topic of the channel slowmode int The amount of time you have to wait between sending sucessive messages in the channel last_message_id Snowflake The id of the last message sent in the channel last_message property readonly The last message sent in the channel Warning This property relies on the message cache so it could return None pins ( self ) async Invokes an API request to get the pinned messages in the channel Returns: Type Description list[Message] The pinned messages in the channel Source code in snekcord\\objects\\channelobject.py async def pins ( self ): \"\"\"Invokes an API request to get the pinned messages in the channel Returns: list[Message]: The pinned messages in the channel \"\"\" data = await rest . get_pinned_messages . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) return self . messages . upsert_many ( data ) typing ( self ) async Invokes an API request to trigger the typing indicator in the channel Source code in snekcord\\objects\\channelobject.py async def typing ( self ): \"\"\"Invokes an API request to trigger the typing indicator in the channel \"\"\" await rest . trigger_typing_indicator . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"Objects"},{"location":"objects/#snekcord.objects.baseobject.BaseObject","text":"This is the base class for all cachable Discord entities Attributes: Name Type Description state BaseState The state that this object belongs to id Optional[Snowflake|str] The object's unique identifier provided by Discord's API, this will be the object's code for GuildTemplate and Invite objects cached bool Whether or not this object is stored in its state's cache. deleted bool Whether or not this object is deleted deleted_at Optional[datetime] The time at which this object was marked as deleted Warning The deleted and deleted_at attributes will only be accurate for objects maintained by a Discord WebSocket connection","title":"BaseObject"},{"location":"objects/#snekcord.objects.baseobject.BaseObject.__hash__","text":"Equivalent to hash(self.id) Exceptions: Type Description PartialObjectError Raised when the object's id is None Source code in snekcord\\objects\\baseobject.py def __hash__ ( self ): \"\"\"Equivalent to `hash(self.id)` Raises: PartialObjectError: Raised when the object's id is None \"\"\" if self . id is None : raise PartialObjectError ( f ' { self . __class__ . __name__ } object is missing a valid id' ) return hash ( self . id )","title":"__hash__()"},{"location":"objects/#snekcord.objects.baseobject.BaseObject.__init__","text":"Parameters: Name Type Description Default state BaseState The state that this object belongs to required Source code in snekcord\\objects\\baseobject.py def __init__ ( self , * , state ): \"\"\" Arguments: state BaseState: The state that this object belongs to \"\"\" self . state = state self . id = None self . cached = False self . deleted = False self . deleted_at = None","title":"__init__()"},{"location":"objects/#snekcord.objects.baseobject.BaseObject.cache","text":"Stores the object in the state's cache and attempts to remove it from the state's recycle bin Source code in snekcord\\objects\\baseobject.py def cache ( self ): \"\"\"Stores the object in the state's cache and attempts to remove it from the state's recycle bin \"\"\" self . cached = True self . state [ self . id ] = self self . state . unrecycle ( self . id , None )","title":"cache()"},{"location":"objects/#snekcord.objects.baseobject.BaseObject.fetch","text":"Equivalent to self.state.fetch(self.id) Source code in snekcord\\objects\\baseobject.py async def fetch ( self ): \"\"\"Equivalent to `self.state.fetch(self.id)`\"\"\" return await self . state . fetch ( self . id )","title":"fetch()"},{"location":"objects/#snekcord.objects.baseobject.BaseObject.uncache","text":"Removes the object from the state's cache Parameters: Name Type Description Default recycle bool Wether or not to put the object in the state's recycle bin True Source code in snekcord\\objects\\baseobject.py def uncache ( self , recycle = True ): \"\"\"Removes the object from the state's cache Arguments: recycle bool: Wether or not to put the object in the state's recycle bin \"\"\" self . cached = False self . state . pop ( self . id , None ) if recycle : self . state . recycle ( self . id , self )","title":"uncache()"},{"location":"objects/#snekcord.objects.channelobject.ChannelType","text":"An enumaration of Discord's channel types Name Description GUILD_TEXT A text channel in a Guild DM A direct message channel GUILD_VOICE A voice channel in a Guild GROUP_DM A DM channel with multiple recipients GUILD_CATEGORY A category channel in a Guild GUILD_NEWS A news channel in a Guild GUILD_STORE A store channel in a Guild GUILD_NEWS_THREAD A news thread channel in a Guild GUILD_PUBLIC_THREAD A public thread channel in a Guild GUILD_PRIVATE_THREAD A private thread channel in a Guild GUILD_STAGE_VOICE A stage channel in a Guild","title":"ChannelType"},{"location":"objects/#snekcord.objects.channelobject.DMChannel","text":"","title":"DMChannel"},{"location":"objects/#snekcord.objects.channelobject.DMChannel.close","text":"Invokes an API request to close the channel Source code in snekcord\\objects\\channelobject.py async def close ( self ): \"\"\"Invokes an API request to close the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"close()"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel","text":"The base class for all channels that belong to a Guild Attributes: Name Type Description name str The name of the channel guild_id Snowflake The id of the guild that the channel is in position int The position of the channel nsfw bool True if the channel is allowed to have explicit content otherwise False parent_id Snowflake The id of the channel's parent/category type ChannelType The type of the channel","title":"GuildChannel"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel.guild","text":"The Guild that the channel belongs to Warning This propery relies on the guild cache so it could return None","title":"guild"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel.mention","text":"The channel in mention format, equivalent to f'<#{self.id}>'","title":"mention"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel.parent","text":"The channel's parent/category Warning This propery relies on the channel cache so it could return None","title":"parent"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel.delete","text":"Invokes an API request to delete the channel Source code in snekcord\\objects\\channelobject.py async def delete ( self ): \"\"\"Invokes an API request to delete the channel\"\"\" await rest . delete_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"delete()"},{"location":"objects/#snekcord.objects.channelobject.GuildChannel.modify","text":"Invokes an API request to modify the channel Arguments: Name Type Channel Types name str All type ChannelType GUILD_TEXT , GUILD_NEWS position int All topic str GUILD_TEXT , GUILD_NEWS nsfw bool GUILD_TEXT , GUILD_NEWS , GUILD_STORE slowmode int GUILD_TEXT bitrate int GUILD_VOICE user_limit int GUILD_VOICE parent SnowflakeLike GUILD_TEXT , GUILD_NEWS , GUILD_STORE , GUILD_VOICE rtc_region str GUILD_VOICE Note Discord only supports conversion between GUILD_TEXT and GUILD_NEWS Returns: Type Description GuildChannel The modified channel Source code in snekcord\\objects\\channelobject.py async def modify ( self , ** kwargs ): \"\"\"Invokes an API request to modify the channel **Arguments:** | Name | Type | Channel Types | | ------------ | --------------- | -------------------------------------------------------- | | `name` | `str` | `All` | | `type` | `ChannelType` | `GUILD_TEXT`, `GUILD_NEWS` | | `position` | `int` | `All` | | `topic` | `str` | `GUILD_TEXT`, `GUILD_NEWS` | | `nsfw` | `bool` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE` | | `slowmode` | `int` | `GUILD_TEXT` | | `bitrate` | `int` | `GUILD_VOICE` | | `user_limit` | `int` | `GUILD_VOICE` | | `parent` | `SnowflakeLike` | `GUILD_TEXT`, `GUILD_NEWS`, `GUILD_STORE`, `GUILD_VOICE` | | `rtc_region` | `str` | `GUILD_VOICE` | note: Discord only supports conversion between `GUILD_TEXT` and `GUILD_NEWS` Returns: GuildChannel: The modified channel \"\"\" # noqa: E501 keys = _guild_channel_modification_keys ( self . type ) if self . type in ( ChannelType . GUILD_TEXT , ChannelType . GUILD_NEWS , ChannelType . GUILD_STORE ): try : kwargs [ 'parent_id' ] = Snowflake . try_snowflake ( kwargs . pop ( 'parent' )) except KeyError : pass if self . type is ChannelType . GUILD_TEXT : try : kwargs [ 'rate_limit_per_user' ] = kwargs . pop ( 'slowmode' ) except KeyError : pass _validate_keys ( f ' { self . __class__ . __name__ } .modify' , kwargs , (), keys ) data = await rest . modify_channel . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ), json = kwargs ) return self . state . upsert ( data )","title":"modify()"},{"location":"objects/#snekcord.objects.channelobject.TextChannel","text":"A class for the GUILD_TEXT channel type Attributes: Name Type Description messages MessageState The message state of the channel topic str The topic of the channel slowmode int The amount of time you have to wait between sending sucessive messages in the channel last_message_id Snowflake The id of the last message sent in the channel","title":"TextChannel"},{"location":"objects/#snekcord.objects.channelobject.TextChannel.last_message","text":"The last message sent in the channel Warning This property relies on the message cache so it could return None","title":"last_message"},{"location":"objects/#snekcord.objects.channelobject.TextChannel.pins","text":"Invokes an API request to get the pinned messages in the channel Returns: Type Description list[Message] The pinned messages in the channel Source code in snekcord\\objects\\channelobject.py async def pins ( self ): \"\"\"Invokes an API request to get the pinned messages in the channel Returns: list[Message]: The pinned messages in the channel \"\"\" data = await rest . get_pinned_messages . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id )) return self . messages . upsert_many ( data )","title":"pins()"},{"location":"objects/#snekcord.objects.channelobject.TextChannel.typing","text":"Invokes an API request to trigger the typing indicator in the channel Source code in snekcord\\objects\\channelobject.py async def typing ( self ): \"\"\"Invokes an API request to trigger the typing indicator in the channel \"\"\" await rest . trigger_typing_indicator . request ( session = self . state . manager . rest , fmt = dict ( channel_id = self . id ))","title":"typing()"}]}