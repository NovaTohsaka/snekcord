import weakref
from typing import (Any, Callable, Generator, Generic, Iterable,
                    Iterator, Optional, Protocol, TypeVar, Union, overload)

from ..utils import Snowflake

KT = TypeVar('KT')
VT = TypeVar('VT')
DT = TypeVar('DT')


class _ConvertableToInt(Protocol):
    def __int__(self) -> int: ...


_SnowflakeType = Union[str, _ConvertableToInt]


class BaseMapping(Generic[KT, VT]):
    def __iter__(self) -> Iterable[VT]: ...

    def __reversed__(self) -> Iterable[VT]: ...

    @classmethod
    def for_type(cls, klass: type) -> type: ...


class BaseSnowflakeMapping(BaseMapping[KT, VT]):
    def __setitem__(self, key: _SnowflakeType, value: VT) -> None: ...

    def __getitem__(self, key: _SnowflakeType) -> VT: ...

    def __delitem__(self, key: _SnowflakeType) -> None: ...

    def __contains__(self, key: _SnowflakeType) -> bool: ...

    def get(self, key: _SnowflakeType,
            default: Optional[DT] = ...) -> Union[VT, DT]: ...

    @overload
    def pop(self, key: _SnowflakeType) -> VT: ...

    @overload
    def pop(self, key: _SnowflakeType, default: DT) -> Union[VT, DT]: ...


class Mapping(BaseMapping[KT, VT], dict[KT, VT]):
    ...


class SnowflakeMapping(BaseSnowflakeMapping[Snowflake, VT],
                       dict[Snowflake, VT]):
    ...


class WeakValueMapping(BaseMapping[KT, VT],
                       weakref.WeakValueDictionary):
    ...


class WeakValueSnowflakeMapping(BaseSnowflakeMapping[int, VT],
                                weakref.WeakValueDictionary):
    ...


class _StateCommon:
    def __contains__(self, key: Any) -> bool: ...

    def find(self, func: Callable[[Any], Any]) -> Any: ...


class BaseState(_StateCommon, Generic[KT, VT]):
    __container__: type[Mapping[KT, VT]]
    __recycled_container__: type[WeakValueMapping[KT, VT]]
    __maxsize__: int
    __replace__: bool
    _items: Mapping[KT, VT]
    _recycle_bin: WeakValueMapping[KT, VT]
    manager: Any

    def __init__(self, *, manager: Any) -> None: ...

    def __repr__(self) -> str: ...

    @classmethod
    def set_maxsize(cls, maxsize: int) -> None: ...

    @classmethod
    def get_maxsize(cls) -> int: ...

    @classmethod
    def set_replace(cls, replace: bool) -> None: ...

    def __len__(self) -> int: ...

    def __reversed__(self) -> Iterable[VT]: ...

    def __iter__(self) -> Iterator[VT]: ...

    def set(self, key: Any, value: Any) -> bool: ...

    __setitem__ = set

    def __getitem__(self, key: KT) -> VT: ...

    def keys(self) -> Iterable[KT]: ...

    def values(self) -> Iterable[VT]: ...

    def recycle(self) -> None: ...

    @overload
    def unrecycle(self, key: KT) -> VT: ...

    @overload
    def unrecycle(self, key: KT, default: DT) -> Union[VT, DT]: ...

    def get(self, key: KT, default: DT = ...) -> Union[VT, DT]: ...

    @overload
    def pop(self, key: KT) -> VT: ...

    @overload
    def pop(self, key: KT, default: DT) -> Union[VT, DT]: ...

    def popitem(self) -> tuple[KT, VT]: ...

    def append(self, data: dict[str, Any]) -> VT: ...

    def extend(self, data: Iterable[dict[str, Any]]) -> list[VT]: ...


class BaseSubState(Generic[KT, VT]):
    superstate: BaseState[KT, VT]
    _keys: set[KT]

    def add_key(self, key: KT) -> None: ...

    def set_keys(self, keys: Iterable[KT]) -> None: ...

    def remove_key(self, key: KT) -> None: ...

    def __key_for__(self, item: VT) -> KT: ...

    def __repr__(self) -> str: ...

    def __len__(self) -> int: ...

    def __iter__(self) -> Generator[VT, None, None]: ...

    def __reversed__(self) -> Generator[VT, None, None]: ...

    def __getitem__(self, key: KT) -> VT: ...

    def get(self, key: KT, default: DT) -> Union[VT, DT]: ...
